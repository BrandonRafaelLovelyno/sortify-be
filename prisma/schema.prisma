generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String           @unique
  hashedPassword   String
  transactionLogs  TransactionLog[]
  wastes           Waste[]
  rewards          Reward[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model SignUpRequest {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String
  hashedPassword String
  expiredAt      DateTime
  createdAt      DateTime @default(now())
}

model TransactionLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  action    String
}

model Waste {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  userId            String           @db.ObjectId
  user              User             @relation(fields: [userId], references: [id])
  classificationId  String?          @db.ObjectId @unique
  classification    Classification?  @relation(fields: [classificationId], references: [id])
  image             String           // URL or path to image storage
  date              DateTime
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model Classification {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  waste             Waste?
  wasteCategoryId   String         @db.ObjectId
  wasteCategory     WasteCategory  @relation(fields: [wasteCategoryId], references: [id])
  binVerificationId String         @db.ObjectId
  binVerification   BinVerification @relation(fields: [binVerificationId], references: [id])
  isTrue            Boolean
  createdAt         DateTime       @default(now())
}

model WasteCategory {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  binId           String           @db.ObjectId @unique
  bin             TrashBin          @relation(fields: [binId], references: [id]) 
  name            String
  description     String
  image           String           // URL or path to image storage
  classifications Classification[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model BinVerification {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  binId           String           @db.ObjectId
  bin             TrashBin         @relation(fields: [binId], references: [id])
  classifications Classification[]
  image           String           // Changed to URL or path instead of binaryg
  status          String
  date            DateTime
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model TrashBin {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  image            String            // Changed to URL or path instead of binary
  description      String?
  binVerifications BinVerification[]
  wasteCategory    WasteCategory?
}

model Reward {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  points    Int
  date      DateTime
  createdAt DateTime @default(now())
}
